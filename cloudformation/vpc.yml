Resources:
  EphemerisVPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: "#{AWS::StackName}"
      EnableDnsSupport: true  # disable for production
      EnableDnsHostnames: true  # disable for production
      CidrBlock: "10.0.0.0/16"
  EphemerisSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Lambda"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}a"
      CidrBlock: "10.0.3.0/24"
  EphemerisSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Lambda"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}b"
      CidrBlock: "10.0.1.0/24"
  EphemerisSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Lambda"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}c"
      CidrBlock: "10.0.2.0/24"
  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} DB"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}a"
      CidrBlock: "10.0.6.0/24"
  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} DB"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}b"
      CidrBlock: "10.0.7.0/24"
  DBSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} DB"
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}c"
      CidrBlock: "10.0.8.0/24"
  EphemerisSubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EphemerisVPC
      AvailabilityZone: "#{AWS::Region}a"
      CidrBlock: "10.0.10.0/24"
  EphemerisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Ephemeris Functions
      VpcId:
        Ref: EphemerisVPC
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for RDS Instance
      VpcId:
        Ref: EphemerisVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: EphemerisSecurityGroup
  EphemerisPrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "NAT-ed"
      SubnetIds:
      - Ref: EphemerisSubnetA
      - Ref: EphemerisSubnetB
      - Ref: EphemerisSubnetC
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Database"
      SubnetIds:
      - Ref: DBSubnetA
      - Ref: DBSubnetB
      - Ref: DBSubnetC
  NATIP:  # IP for public NAT
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:  # NAT GW in public subnet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref EphemerisSubnetPublic
  PrivateRouteTable:  # Route table for internal routing
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EphemerisVPC
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Private"
  DefaultPrivateRoute:  # Route to provide internet access for private subnet (TODO: provide only for lambda, not RDS etc)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  SubARouteTableAssociation:  # link private subnets to PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref EphemerisSubnetA
  SubBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref EphemerisSubnetB
  SubCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref EphemerisSubnetC
  DBARouteTableAssociation:  # link DB subnets to routes
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  # change to private to wall off from internet
      SubnetId: !Ref DBSubnetA
  DBBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  # see above
      SubnetId: !Ref DBSubnetB
  DBCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref DBSubnetC
  IGW:  # Internet GateWay
    Type: AWS::EC2::InternetGateway
  EphemerisIGWAttachment:  # Connect IGW to Ephemeris VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref EphemerisVPC
  PublicRouteTable:  # Route table for routing to internet
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EphemerisVPC
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
  DefaultPublicRoute:  # Route to provide internet access from NAT to IGW
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicRouteTableAssociation:  # connect public subnet (with NAT GW) to IGW
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ServerlessSubnetPublic
